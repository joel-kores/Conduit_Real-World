// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

const (
	TokenScopes = "Token.Scopes"
)

// Article defines model for Article.
type Article struct {
	Author         Profile   `json:"author"`
	Body           string    `json:"body"`
	CreatedAt      time.Time `json:"createdAt"`
	Description    string    `json:"description"`
	Favorited      bool      `json:"favorited"`
	FavoritesCount int       `json:"favoritesCount"`
	Slug           string    `json:"slug"`
	TagList        []string  `json:"tagList"`
	Title          string    `json:"title"`
	UpdatedAt      time.Time `json:"updatedAt"`
}

// Comment defines model for Comment.
type Comment struct {
	Author    Profile   `json:"author"`
	Body      string    `json:"body"`
	CreatedAt time.Time `json:"createdAt"`
	Id        int       `json:"id"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// GenericErrorModel defines model for GenericErrorModel.
type GenericErrorModel struct {
	Errors struct {
		Body []string `json:"body"`
	} `json:"errors"`
}

// LoginUser defines model for LoginUser.
type LoginUser struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// NewArticle defines model for NewArticle.
type NewArticle struct {
	Body        string    `json:"body"`
	Description string    `json:"description"`
	TagList     *[]string `json:"tagList,omitempty"`
	Title       string    `json:"title"`
}

// NewComment defines model for NewComment.
type NewComment struct {
	Body string `json:"body"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// Profile defines model for Profile.
type Profile struct {
	Bio       string `json:"bio"`
	Following bool   `json:"following"`
	Image     string `json:"image"`
	Username  string `json:"username"`
}

// UpdateArticle defines model for UpdateArticle.
type UpdateArticle struct {
	Body        *string `json:"body,omitempty"`
	Description *string `json:"description,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// UpdateUser defines model for UpdateUser.
type UpdateUser struct {
	Bio      *string `json:"bio,omitempty"`
	Email    *string `json:"email,omitempty"`
	Image    *string `json:"image,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// User defines model for User.
type User struct {
	Bio      string `json:"bio"`
	Email    string `json:"email"`
	Image    string `json:"image"`
	Token    string `json:"token"`
	Username string `json:"username"`
}

// LimitParam defines model for limitParam.
type LimitParam = int

// OffsetParam defines model for offsetParam.
type OffsetParam = int

// GenericError defines model for GenericError.
type GenericError = GenericErrorModel

// MultipleArticlesResponse defines model for MultipleArticlesResponse.
type MultipleArticlesResponse struct {
	Articles []struct {
		Author         Profile   `json:"author"`
		CreatedAt      time.Time `json:"createdAt"`
		Description    string    `json:"description"`
		Favorited      bool      `json:"favorited"`
		FavoritesCount int       `json:"favoritesCount"`
		Slug           string    `json:"slug"`
		TagList        []string  `json:"tagList"`
		Title          string    `json:"title"`
		UpdatedAt      time.Time `json:"updatedAt"`
	} `json:"articles"`
	ArticlesCount int `json:"articlesCount"`
}

// MultipleCommentsResponse defines model for MultipleCommentsResponse.
type MultipleCommentsResponse struct {
	Comments []Comment `json:"comments"`
}

// ProfileResponse defines model for ProfileResponse.
type ProfileResponse struct {
	Profile Profile `json:"profile"`
}

// SingleArticleResponse defines model for SingleArticleResponse.
type SingleArticleResponse struct {
	Article Article `json:"article"`
}

// SingleCommentResponse defines model for SingleCommentResponse.
type SingleCommentResponse struct {
	Comment Comment `json:"comment"`
}

// TagsResponse defines model for TagsResponse.
type TagsResponse struct {
	Tags []string `json:"tags"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	User User `json:"user"`
}

// LoginUserRequest defines model for LoginUserRequest.
type LoginUserRequest struct {
	User LoginUser `json:"user"`
}

// NewArticleRequest defines model for NewArticleRequest.
type NewArticleRequest struct {
	Article NewArticle `json:"article"`
}

// NewCommentRequest defines model for NewCommentRequest.
type NewCommentRequest struct {
	Comment NewComment `json:"comment"`
}

// NewUserRequest defines model for NewUserRequest.
type NewUserRequest struct {
	User NewUser `json:"user"`
}

// UpdateArticleRequest defines model for UpdateArticleRequest.
type UpdateArticleRequest struct {
	Article UpdateArticle `json:"article"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	User UpdateUser `json:"user"`
}

// GetArticlesParams defines parameters for GetArticles.
type GetArticlesParams struct {
	// Tag Filter by tag
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Author Filter by author (username)
	Author *string `form:"author,omitempty" json:"author,omitempty"`

	// Favorited Filter by favorites of a user (username)
	Favorited *string `form:"favorited,omitempty" json:"favorited,omitempty"`

	// Offset The number of items to skip before starting to collect the result set.
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return.
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateArticleJSONBody defines parameters for CreateArticle.
type CreateArticleJSONBody struct {
	Article NewArticle `json:"article"`
}

// GetArticlesFeedParams defines parameters for GetArticlesFeed.
type GetArticlesFeedParams struct {
	// Offset The number of items to skip before starting to collect the result set.
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return.
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`
}

// UpdateArticleJSONBody defines parameters for UpdateArticle.
type UpdateArticleJSONBody struct {
	Article UpdateArticle `json:"article"`
}

// CreateArticleCommentJSONBody defines parameters for CreateArticleComment.
type CreateArticleCommentJSONBody struct {
	Comment NewComment `json:"comment"`
}

// UpdateCurrentUserJSONBody defines parameters for UpdateCurrentUser.
type UpdateCurrentUserJSONBody struct {
	User UpdateUser `json:"user"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	User NewUser `json:"user"`
}

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	User LoginUser `json:"user"`
}

// CreateArticleJSONRequestBody defines body for CreateArticle for application/json ContentType.
type CreateArticleJSONRequestBody CreateArticleJSONBody

// UpdateArticleJSONRequestBody defines body for UpdateArticle for application/json ContentType.
type UpdateArticleJSONRequestBody UpdateArticleJSONBody

// CreateArticleCommentJSONRequestBody defines body for CreateArticleComment for application/json ContentType.
type CreateArticleCommentJSONRequestBody CreateArticleCommentJSONBody

// UpdateCurrentUserJSONRequestBody defines body for UpdateCurrentUser for application/json ContentType.
type UpdateCurrentUserJSONRequestBody UpdateCurrentUserJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get recent articles globally
	// (GET /articles)
	GetArticles(w http.ResponseWriter, r *http.Request, params GetArticlesParams)
	// Create an article
	// (POST /articles)
	CreateArticle(w http.ResponseWriter, r *http.Request)
	// Get recent articles from users you follow
	// (GET /articles/feed)
	GetArticlesFeed(w http.ResponseWriter, r *http.Request, params GetArticlesFeedParams)
	// Delete an article
	// (DELETE /articles/{slug})
	DeleteArticle(w http.ResponseWriter, r *http.Request, slug string)
	// Get an article
	// (GET /articles/{slug})
	GetArticle(w http.ResponseWriter, r *http.Request, slug string)
	// Update an article
	// (PUT /articles/{slug})
	UpdateArticle(w http.ResponseWriter, r *http.Request, slug string)
	// Get comments for an article
	// (GET /articles/{slug}/comments)
	GetArticleComments(w http.ResponseWriter, r *http.Request, slug string)
	// Create a comment for an article
	// (POST /articles/{slug}/comments)
	CreateArticleComment(w http.ResponseWriter, r *http.Request, slug string)
	// Delete a comment for an article
	// (DELETE /articles/{slug}/comments/{id})
	DeleteArticleComment(w http.ResponseWriter, r *http.Request, slug string, id int)
	// Unfavorite an article
	// (DELETE /articles/{slug}/favorite)
	DeleteArticleFavorite(w http.ResponseWriter, r *http.Request, slug string)
	// Favorite an article
	// (POST /articles/{slug}/favorite)
	CreateArticleFavorite(w http.ResponseWriter, r *http.Request, slug string)
	// Get a profile
	// (GET /profiles/{username})
	GetProfileByUsername(w http.ResponseWriter, r *http.Request, username string)
	// Unfollow a user
	// (DELETE /profiles/{username}/follow)
	UnfollowUserByUsername(w http.ResponseWriter, r *http.Request, username string)
	// Follow a user
	// (POST /profiles/{username}/follow)
	FollowUserByUsername(w http.ResponseWriter, r *http.Request, username string)
	// Get tags
	// (GET /tags)
	GetTags(w http.ResponseWriter, r *http.Request)
	// Get current user
	// (GET /user)
	GetCurrentUser(w http.ResponseWriter, r *http.Request)
	// Update current user
	// (PUT /user)
	UpdateCurrentUser(w http.ResponseWriter, r *http.Request)

	// (POST /users)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Existing user login
	// (POST /users/login)
	Login(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get recent articles globally
// (GET /articles)
func (_ Unimplemented) GetArticles(w http.ResponseWriter, r *http.Request, params GetArticlesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create an article
// (POST /articles)
func (_ Unimplemented) CreateArticle(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get recent articles from users you follow
// (GET /articles/feed)
func (_ Unimplemented) GetArticlesFeed(w http.ResponseWriter, r *http.Request, params GetArticlesFeedParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an article
// (DELETE /articles/{slug})
func (_ Unimplemented) DeleteArticle(w http.ResponseWriter, r *http.Request, slug string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get an article
// (GET /articles/{slug})
func (_ Unimplemented) GetArticle(w http.ResponseWriter, r *http.Request, slug string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an article
// (PUT /articles/{slug})
func (_ Unimplemented) UpdateArticle(w http.ResponseWriter, r *http.Request, slug string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get comments for an article
// (GET /articles/{slug}/comments)
func (_ Unimplemented) GetArticleComments(w http.ResponseWriter, r *http.Request, slug string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a comment for an article
// (POST /articles/{slug}/comments)
func (_ Unimplemented) CreateArticleComment(w http.ResponseWriter, r *http.Request, slug string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a comment for an article
// (DELETE /articles/{slug}/comments/{id})
func (_ Unimplemented) DeleteArticleComment(w http.ResponseWriter, r *http.Request, slug string, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unfavorite an article
// (DELETE /articles/{slug}/favorite)
func (_ Unimplemented) DeleteArticleFavorite(w http.ResponseWriter, r *http.Request, slug string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Favorite an article
// (POST /articles/{slug}/favorite)
func (_ Unimplemented) CreateArticleFavorite(w http.ResponseWriter, r *http.Request, slug string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a profile
// (GET /profiles/{username})
func (_ Unimplemented) GetProfileByUsername(w http.ResponseWriter, r *http.Request, username string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unfollow a user
// (DELETE /profiles/{username}/follow)
func (_ Unimplemented) UnfollowUserByUsername(w http.ResponseWriter, r *http.Request, username string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Follow a user
// (POST /profiles/{username}/follow)
func (_ Unimplemented) FollowUserByUsername(w http.ResponseWriter, r *http.Request, username string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get tags
// (GET /tags)
func (_ Unimplemented) GetTags(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get current user
// (GET /user)
func (_ Unimplemented) GetCurrentUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update current user
// (PUT /user)
func (_ Unimplemented) UpdateCurrentUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /users)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Existing user login
// (POST /users/login)
func (_ Unimplemented) Login(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetArticles operation middleware
func (siw *ServerInterfaceWrapper) GetArticles(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesParams

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", r.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tag", Err: err})
		return
	}

	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", r.URL.Query(), &params.Author)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "author", Err: err})
		return
	}

	// ------------- Optional query parameter "favorited" -------------

	err = runtime.BindQueryParameter("form", true, false, "favorited", r.URL.Query(), &params.Favorited)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "favorited", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArticles(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateArticle operation middleware
func (siw *ServerInterfaceWrapper) CreateArticle(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateArticle(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetArticlesFeed operation middleware
func (siw *ServerInterfaceWrapper) GetArticlesFeed(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesFeedParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArticlesFeed(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteArticle operation middleware
func (siw *ServerInterfaceWrapper) DeleteArticle(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", chi.URLParam(r, "slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteArticle(w, r, slug)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetArticle operation middleware
func (siw *ServerInterfaceWrapper) GetArticle(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", chi.URLParam(r, "slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArticle(w, r, slug)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateArticle operation middleware
func (siw *ServerInterfaceWrapper) UpdateArticle(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", chi.URLParam(r, "slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateArticle(w, r, slug)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetArticleComments operation middleware
func (siw *ServerInterfaceWrapper) GetArticleComments(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", chi.URLParam(r, "slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArticleComments(w, r, slug)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateArticleComment operation middleware
func (siw *ServerInterfaceWrapper) CreateArticleComment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", chi.URLParam(r, "slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateArticleComment(w, r, slug)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteArticleComment operation middleware
func (siw *ServerInterfaceWrapper) DeleteArticleComment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", chi.URLParam(r, "slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteArticleComment(w, r, slug, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteArticleFavorite operation middleware
func (siw *ServerInterfaceWrapper) DeleteArticleFavorite(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", chi.URLParam(r, "slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteArticleFavorite(w, r, slug)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateArticleFavorite operation middleware
func (siw *ServerInterfaceWrapper) CreateArticleFavorite(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", chi.URLParam(r, "slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateArticleFavorite(w, r, slug)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProfileByUsername operation middleware
func (siw *ServerInterfaceWrapper) GetProfileByUsername(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", chi.URLParam(r, "username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProfileByUsername(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UnfollowUserByUsername operation middleware
func (siw *ServerInterfaceWrapper) UnfollowUserByUsername(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", chi.URLParam(r, "username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnfollowUserByUsername(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FollowUserByUsername operation middleware
func (siw *ServerInterfaceWrapper) FollowUserByUsername(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", chi.URLParam(r, "username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FollowUserByUsername(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTags operation middleware
func (siw *ServerInterfaceWrapper) GetTags(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTags(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCurrentUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateCurrentUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCurrentUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/articles", wrapper.GetArticles)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/articles", wrapper.CreateArticle)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/articles/feed", wrapper.GetArticlesFeed)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/articles/{slug}", wrapper.DeleteArticle)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/articles/{slug}", wrapper.GetArticle)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/articles/{slug}", wrapper.UpdateArticle)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/articles/{slug}/comments", wrapper.GetArticleComments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/articles/{slug}/comments", wrapper.CreateArticleComment)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/articles/{slug}/comments/{id}", wrapper.DeleteArticleComment)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/articles/{slug}/favorite", wrapper.DeleteArticleFavorite)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/articles/{slug}/favorite", wrapper.CreateArticleFavorite)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/profiles/{username}", wrapper.GetProfileByUsername)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/profiles/{username}/follow", wrapper.UnfollowUserByUsername)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/profiles/{username}/follow", wrapper.FollowUserByUsername)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tags", wrapper.GetTags)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user", wrapper.GetCurrentUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/user", wrapper.UpdateCurrentUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/login", wrapper.Login)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
